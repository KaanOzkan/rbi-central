#! /usr/bin/env ruby

require "bundler/setup"
require "json-schema"
require "open3"

INDEX_PATH = "index.json"
SCHEMA_PATH = "schema.json"
RBIS_PATH = "rbi/annotations"

class IndexValidator
  def self.validate!(index_path: INDEX_PATH, schema_path: SCHEMA_PATH, rbis_path: RBIS_PATH)
    $stderr.puts("Checking index...\n\n")

    validator = new(index_path: index_path, schema_path: schema_path, rbis_path: rbis_path)
    exit(1) unless validator.validate!

    $stderr.puts("No errors, good job!")
  end

  def initialize(index_path:, schema_path:, rbis_path:)
    @index_path = index_path
    @schema_path = schema_path
    @rbis_path = rbis_path

    @index_json = load_json(index_path)
    @schema_json = load_json(schema_path)
  end

  def validate!
    success = true
    success &= check_against_schema!
    success &= check_missing_index_entries!
    success &= check_missing_annotations!
    success &= check_json_format!
    success
  end

  private

  def check_against_schema!
    JSON::Validator.validate!(@schema_json, @index_json)
  rescue JSON::Schema::ValidationError => e
    $stderr.puts(" * #{e.message}\n")
  end

  def check_missing_annotations!
    success = true
    @index_json.each do |gem_name, _|
      file = "#{@rbis_path}/#{gem_name}.rbi"
      next if File.file?(file)

      $stderr.puts(" * Missing RBI file matching index entry `#{gem_name}` (annotation `#{file}` not found)")
      success = false
    end
    success
  end

  def check_missing_index_entries!
    success = true
    rbis = Dir.glob("#{@rbis_path}/*.rbi").sort
    rbis.each do |path|
      name = File.basename(path, ".rbi")
      next if @index_json.key?(name)

      $stderr.puts(" * Missing index entry matching RBI file `#{path}` (key `#{name}` not found in `#{@index_path}`)")
      success = false
    end
    success
  end

  def check_json_format!
    sorted = Hash[@index_json.sort]
    expected_json = JSON.pretty_generate(sorted) << "\n"
    expected_path = "expected"
    File.write(expected_path, expected_json)

    out, status = Open3.capture2e("diff -u #{@index_path} #{expected_path}")
    unless status.success?
      $stderr.puts(" * Formatting errors found in `#{@index_path}`:")
      $stderr.puts("\n#{out}\n")
      return false
    end

    true
  ensure
    FileUtils.rm(expected_path)
  end

  def load_json(path)
    JSON.parse(File.read(path))
  rescue JSON::ParserError => e
    error = e.message.sub(/^[0-9]+: /, "")
    $stderr.puts(" * Invalid JSON in `#{path}``:")
    $stderr.puts("\n#{error}\n")
    exit(1)
  end

  def load_annotations_names(path)
    Dir.glob("#{path}/*.rbi").sort.map { |path| File.basename(path, ".rbi") }
  end
end

IndexValidator.validate!
